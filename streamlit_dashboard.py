
#!/usr/bin/env python3
"""
Standalone Streamlit Dashboard for IA Fiscal Capivari
Optimized for Replit environment
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import json
import time

# Configure Streamlit page
st.set_page_config(
    page_title="IA Fiscal Capivari",
    page_icon="üèõÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for better styling
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #1e3c72 0%, #2a5298 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 10px;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #2a5298;
        margin: 0.5rem 0;
    }
    .alert-critical {
        border-left-color: #dc3545;
        background: #fff5f5;
    }
    .alert-medium {
        border-left-color: #ffc107;
        background: #fffdf5;
    }
    .alert-low {
        border-left-color: #28a745;
        background: #f8fff8;
    }
    .stTabs [data-baseweb="tab-list"] {
        gap: 2px;
    }
    .stTabs [data-baseweb="tab"] {
        height: 50px;
        padding-left: 20px;
        padding-right: 20px;
    }
</style>
""", unsafe_allow_html=True)

def main():
    """Main dashboard function"""
    
    # Header
    st.markdown("""
    <div class="main-header">
        <h1>üèõÔ∏è IA Fiscal Capivari</h1>
        <p>Sistema de Monitoramento e Alertas para Gastos Municipais</p>
        <small>Dashboard em funcionamento - {}s</small>
    </div>
    """.format(int(time.time())), unsafe_allow_html=True)
    
    # Sidebar navigation
    with st.sidebar:
        st.title("üìã Menu")
        page = st.selectbox(
            "Navega√ß√£o:",
            ["Dashboard Principal", "Alertas Ativos", "An√°lise de Gastos", "Relat√≥rios", "Configura√ß√µes"],
            index=0
        )
        
        st.markdown("---")
        
        # Quick stats in sidebar
        st.markdown("### üìä Resumo R√°pido")
        st.metric("Alertas Hoje", "12", "+3")
        st.metric("Valor Analisado", "R$ 2.1M", "+15%")
        st.metric("Efici√™ncia", "85%", "+2%")
        
        st.markdown("---")
        
        # Status indicators
        st.markdown("### üü¢ Status do Sistema")
        st.success("API: Conectada")
        st.success("Banco: Online")
        st.success("IA: Ativa")
    
    # Main content based on selected page
    if page == "Dashboard Principal":
        show_main_dashboard()
    elif page == "Alertas Ativos":
        show_alerts_page()
    elif page == "An√°lise de Gastos":
        show_spending_analysis()
    elif page == "Relat√≥rios":
        show_reports_page()
    elif page == "Configura√ß√µes":
        show_settings_page()

def show_main_dashboard():
    """Main dashboard page"""
    
    # Key performance indicators
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            label="üì¢ Total de Alertas",
            value="156",
            delta="12 novos hoje"
        )
        
    with col2:
        st.metric(
            label="‚ö†Ô∏è Alertas Cr√≠ticos", 
            value="23",
            delta="5 pendentes"
        )
        
    with col3:
        st.metric(
            label="üí∞ Valor Investigado",
            value="R$ 3.2M",
            delta="‚Üë 18% vs m√™s anterior"
        )
        
    with col4:
        st.metric(
            label="üéØ Taxa de Precis√£o",
            value="89%",
            delta="‚Üë 3% otimiza√ß√£o IA"
        )
    
    st.markdown("---")
    
    # Charts row
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìà Tend√™ncia de Alertas (√öltimos 30 dias)")
        
        # Generate sample data for alerts trend
        dates = pd.date_range(start=datetime.now() - timedelta(days=29), end=datetime.now(), freq='D')
        np_values = [8, 12, 6, 15, 9, 18, 11, 7, 14, 10, 16, 13, 5, 19, 8, 12, 15, 9, 11, 17, 6, 13, 10, 14, 7, 16, 12, 8, 15, 11]
        
        df_trend = pd.DataFrame({
            'Data': dates,
            'Alertas': np_values
        })
        
        fig_trend = px.line(
            df_trend, 
            x='Data', 
            y='Alertas',
            title="Alertas por Dia",
            line_shape='spline'
        )
        fig_trend.update_layout(showlegend=False)
        st.plotly_chart(fig_trend, use_container_width=True)
    
    with col2:
        st.subheader("üéØ Distribui√ß√£o por Tipo de Alerta")
        
        alert_types = pd.DataFrame({
            'Tipo': ['Sobrepre√ßo', 'Fracionamento', 'Concentra√ß√£o', 'Emerg√™ncia', 'Direcionamento'],
            'Quantidade': [45, 38, 28, 25, 20],
            'Cores': ['#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', '#feca57']
        })
        
        fig_pie = px.pie(
            alert_types, 
            values='Quantidade', 
            names='Tipo',
            title="Tipos de Alertas",
            color_discrete_sequence=alert_types['Cores']
        )
        st.plotly_chart(fig_pie, use_container_width=True)
    
    # Recent alerts table
    st.subheader("üö® Alertas Recentes")
    
    recent_alerts = pd.DataFrame({
        'ID': ['#2024-001', '#2024-002', '#2024-003', '#2024-004', '#2024-005'],
        'Tipo': ['Sobrepre√ßo', 'Fracionamento', 'Concentra√ß√£o', 'Emerg√™ncia', 'Direcionamento'],
        'Descri√ß√£o': [
            'Material de escrit√≥rio 45% acima do pre√ßo m√©dio de mercado',
            'Poss√≠vel fracionamento em compras de combust√≠vel',
            'Alta concentra√ß√£o de contratos com fornecedor XYZ Ltda',
            'M√∫ltiplas emerg√™ncias de TI do mesmo fornecedor',
            'Ind√≠cios de direcionamento em licita√ß√£o de obras'
        ],
        'Risco': [9, 7, 8, 6, 9],
        'Valor': ['R$ 125.000', 'R$ 89.500', 'R$ 234.000', 'R$ 45.000', 'R$ 678.000'],
        'Data': ['18/01/2024', '18/01/2024', '17/01/2024', '17/01/2024', '16/01/2024'],
        'Status': ['üî¥ Cr√≠tico', 'üü° M√©dio', 'üî¥ Cr√≠tico', 'üü° M√©dio', 'üî¥ Cr√≠tico']
    })
    
    st.dataframe(
        recent_alerts,
        use_container_width=True,
        hide_index=True
    )

def show_alerts_page():
    """Alerts management page"""
    
    st.subheader("üö® Gest√£o de Alertas")
    
    # Filters
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        alert_type = st.selectbox(
            "Tipo de Alerta:",
            ["Todos", "Sobrepre√ßo", "Fracionamento", "Concentra√ß√£o", "Emerg√™ncia", "Direcionamento"]
        )
    
    with col2:
        risk_level = st.selectbox(
            "N√≠vel de Risco:",
            ["Todos", "Alto (8-10)", "M√©dio (5-7)", "Baixo (1-4)"]
        )
    
    with col3:
        status = st.selectbox(
            "Status:",
            ["Todos", "Pendente", "Em An√°lise", "Investigado", "Arquivado"]
        )
    
    with col4:
        date_range = st.selectbox(
            "Per√≠odo:",
            ["√öltimos 7 dias", "√öltimos 30 dias", "√öltimos 90 dias", "Este ano"]
        )
    
    if st.button("üîç Aplicar Filtros", type="primary"):
        st.success("Filtros aplicados com sucesso!")
    
    st.markdown("---")
    
    # Alert details
    tabs = st.tabs(["üìä Vis√£o Geral", "üìã Lista Detalhada", "üìà An√°lise Temporal"])
    
    with tabs[0]:
        col1, col2 = st.columns(2)
        
        with col1:
            # Risk distribution
            risk_data = pd.DataFrame({
                'N√≠vel': ['Alto', 'M√©dio', 'Baixo'],
                'Quantidade': [23, 45, 32],
                'Cor': ['#dc3545', '#ffc107', '#28a745']
            })
            
            fig_risk = px.bar(
                risk_data,
                x='N√≠vel',
                y='Quantidade',
                title="Distribui√ß√£o por N√≠vel de Risco",
                color='N√≠vel',
                color_discrete_map={'Alto': '#dc3545', 'M√©dio': '#ffc107', 'Baixo': '#28a745'}
            )
            st.plotly_chart(fig_risk, use_container_width=True)
        
        with col2:
            # Status distribution
            status_data = pd.DataFrame({
                'Status': ['Pendente', 'Em An√°lise', 'Investigado', 'Arquivado'],
                'Quantidade': [34, 28, 25, 13]
            })
            
            fig_status = px.pie(
                status_data,
                values='Quantidade',
                names='Status',
                title="Status dos Alertas"
            )
            st.plotly_chart(fig_status, use_container_width=True)
    
    with tabs[1]:
        # Detailed alerts list
        detailed_alerts = pd.DataFrame({
            'ID': [f'#2024-{str(i).zfill(3)}' for i in range(1, 21)],
            'Tipo': ['Sobrepre√ßo', 'Fracionamento', 'Concentra√ß√£o'] * 7,
            'Risco': [9, 7, 8, 6, 9, 5, 8, 7, 9, 6, 8, 5, 7, 9, 6, 8, 7, 9, 5, 8],
            'Valor': [f'R$ {(i*15000 + 10000):,.0f}' for i in range(1, 21)],
            'Fornecedor': [f'Empresa {chr(65+i%10)} Ltda' for i in range(20)],
            'Data': [(datetime.now() - timedelta(days=i)).strftime('%d/%m/%Y') for i in range(20)]
        })
        
        st.dataframe(detailed_alerts, use_container_width=True, hide_index=True)
    
    with tabs[2]:
        # Temporal analysis
        st.info("An√°lise temporal dos alertas por categoria e per√≠odo")
        
        # Time series chart
        dates = pd.date_range(start=datetime.now() - timedelta(days=30), end=datetime.now(), freq='D')
        types = ['Sobrepre√ßo', 'Fracionamento', 'Concentra√ß√£o']
        
        data_rows = []
        for date in dates:
            for alert_type in types:
                data_rows.append({
                    'Data': date,
                    'Tipo': alert_type,
                    'Alertas': abs(int((date.day + hash(alert_type)) % 8)) + 1
                })
        
        df_temporal = pd.DataFrame(data_rows)
        
        fig_temporal = px.line(
            df_temporal,
            x='Data',
            y='Alertas',
            color='Tipo',
            title="Evolu√ß√£o Temporal por Tipo de Alerta"
        )
        st.plotly_chart(fig_temporal, use_container_width=True)

def show_spending_analysis():
    """Spending analysis page"""
    
    st.subheader("üí∞ An√°lise de Gastos Municipais")
    
    # Summary metrics
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Gasto Total Analisado", "R$ 12.5M", "‚Üë 8% vs per√≠odo anterior")
    
    with col2:
        st.metric("Economia Identificada", "R$ 485K", "‚Üë 23% otimiza√ß√£o")
    
    with col3:
        st.metric("Contratos Analisados", "1,247", "+156 este m√™s")
    
    st.markdown("---")
    
    # Analysis charts
    tabs = st.tabs(["üìä Por Categoria", "üè¢ Por Secretaria", "üìÖ Temporal", "üîç Fornecedores"])
    
    with tabs[0]:
        # Spending by category
        categories = pd.DataFrame({
            'Categoria': ['Material de Escrit√≥rio', 'Combust√≠vel', 'Obras', 'Servi√ßos TI', 'Medicina', 'Educa√ß√£o'],
            'Valor': [1250000, 2300000, 3200000, 890000, 2100000, 2760000],
            'Alertas': [25, 18, 12, 15, 8, 22]
        })
        
        col1, col2 = st.columns(2)
        
        with col1:
            fig_cat_spending = px.bar(
                categories,
                x='Categoria',
                y='Valor',
                title="Gastos por Categoria",
                text='Valor'
            )
            fig_cat_spending.update_traces(texttemplate='R$ %{text:,.0f}', textposition='outside')
            fig_cat_spending.update_layout(xaxis_tickangle=-45)
            st.plotly_chart(fig_cat_spending, use_container_width=True)
        
        with col2:
            fig_cat_alerts = px.scatter(
                categories,
                x='Valor',
                y='Alertas',
                size='Valor',
                hover_name='Categoria',
                title="Rela√ß√£o Gastos vs Alertas"
            )
            st.plotly_chart(fig_cat_alerts, use_container_width=True)
    
    with tabs[1]:
        st.info("An√°lise de gastos por secretaria municipal")
        
        # Department spending
        departments = pd.DataFrame({
            'Secretaria': ['Educa√ß√£o', 'Sa√∫de', 'Obras', 'Administra√ß√£o', 'Transporte'],
            'Or√ßamento': [5000000, 4500000, 3200000, 1800000, 1200000],
            'Executado': [4200000, 4100000, 2800000, 1650000, 1050000],
            'Percentual': [84, 91, 88, 92, 88]
        })
        
        fig_dept = px.bar(
            departments,
            x='Secretaria',
            y=['Or√ßamento', 'Executado'],
            title="Or√ßamento vs Executado por Secretaria",
            barmode='group'
        )
        st.plotly_chart(fig_dept, use_container_width=True)
    
    with tabs[2]:
        st.info("An√°lise temporal dos gastos")
        
        # Monthly spending trend
        months = pd.date_range(start='2024-01-01', end='2024-12-01', freq='M')
        monthly_data = pd.DataFrame({
            'M√™s': months,
            'Gastos': [1200000 + i*50000 + (i%3)*100000 for i in range(len(months))],
            'Meta': [1500000] * len(months)
        })
        
        fig_monthly = px.line(
            monthly_data,
            x='M√™s',
            y=['Gastos', 'Meta'],
            title="Evolu√ß√£o Mensal dos Gastos"
        )
        st.plotly_chart(fig_monthly, use_container_width=True)
    
    with tabs[3]:
        st.info("An√°lise de fornecedores")
        
        # Top suppliers
        suppliers = pd.DataFrame({
            'Fornecedor': [f'Empresa {chr(65+i)} Ltda' for i in range(10)],
            'Valor_Contratado': [500000 - i*40000 for i in range(10)],
            'Num_Contratos': [15 - i for i in range(10)],
            'Alertas': [8, 5, 12, 3, 7, 9, 4, 6, 10, 2]
        })
        
        fig_suppliers = px.scatter(
            suppliers,
            x='Valor_Contratado',
            y='Num_Contratos',
            size='Alertas',
            hover_name='Fornecedor',
            title="Fornecedores: Valor vs Contratos (tamanho = alertas)"
        )
        st.plotly_chart(fig_suppliers, use_container_width=True)

def show_reports_page():
    """Reports page"""
    
    st.subheader("üìã Relat√≥rios e Exporta√ß√µes")
    
    # Report generation
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### üìä Gerar Relat√≥rio")
        
        report_type = st.selectbox(
            "Tipo de Relat√≥rio:",
            ["Resumo Executivo", "Alertas Detalhados", "An√°lise de Fornecedores", "Gastos por Categoria", "Relat√≥rio Completo"]
        )
        
        date_start = st.date_input("Data Inicial:", value=datetime.now() - timedelta(days=30))
        date_end = st.date_input("Data Final:", value=datetime.now())
        
        format_type = st.selectbox("Formato:", ["PDF", "Excel", "CSV"])
        
        if st.button("üìÑ Gerar Relat√≥rio", type="primary"):
            with st.spinner("Gerando relat√≥rio..."):
                time.sleep(2)  # Simulate processing
            st.success(f"Relat√≥rio {report_type} gerado com sucesso!")
            st.download_button(
                label=f"‚¨áÔ∏è Download {report_type}.{format_type.lower()}",
                data=f"Relat√≥rio simulado - {report_type}",
                file_name=f"relatorio_{report_type.lower().replace(' ', '_')}_{datetime.now().strftime('%Y%m%d')}.{format_type.lower()}",
                mime="application/octet-stream"
            )
    
    with col2:
        st.markdown("### üìà Relat√≥rios R√°pidos")
        
        if st.button("üìä Dashboard Executivo"):
            st.info("Gerando dashboard executivo...")
        
        if st.button("üö® Alertas Cr√≠ticos"):
            st.info("Compilando alertas cr√≠ticos...")
        
        if st.button("üí∞ Resumo Financeiro"):
            st.info("Processando resumo financeiro...")
        
        if st.button("üìã Compliance"):
            st.info("Verificando compliance...")
    
    st.markdown("---")
    
    # Recent reports
    st.subheader("üìã Relat√≥rios Recentes")
    
    recent_reports = pd.DataFrame({
        'Relat√≥rio': ['Resumo Executivo - Janeiro', 'Alertas Cr√≠ticos - S01', 'Fornecedores - Trimestre', 'Gastos Educa√ß√£o - Janeiro'],
        'Tipo': ['Executivo', 'Alertas', 'Fornecedores', 'Categoria'],
        'Data_Gera√ß√£o': ['15/01/2024', '12/01/2024', '08/01/2024', '05/01/2024'],
        'Status': ['‚úÖ Conclu√≠do', '‚úÖ Conclu√≠do', '‚úÖ Conclu√≠do', '‚úÖ Conclu√≠do'],
        'Tamanho': ['2.1 MB', '856 KB', '1.4 MB', '678 KB']
    })
    
    st.dataframe(recent_reports, use_container_width=True, hide_index=True)

def show_settings_page():
    """Settings page"""
    
    st.subheader("‚öôÔ∏è Configura√ß√µes do Sistema")
    
    tabs = st.tabs(["üîß Alertas", "üë• Usu√°rios", "üìß Notifica√ß√µes", "üîê Seguran√ßa"])
    
    with tabs[0]:
        st.markdown("### üéØ Configura√ß√£o de Alertas")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.number_input("Limite Sobrepre√ßo (%)", min_value=1, max_value=100, value=25)
            st.number_input("Valor M√≠nimo Fracionamento (R$)", min_value=1000, value=8000)
            st.number_input("Concentra√ß√£o Fornecedor (%)", min_value=10, max_value=100, value=70)
        
        with col2:
            st.number_input("Dias Emerg√™ncia Recorrente", min_value=1, value=30)
            st.number_input("Limite Direcionamento (%)", min_value=1, max_value=100, value=15)
            st.selectbox("Sensibilidade IA:", ["Baixa", "M√©dia", "Alta"], index=1)
        
        if st.button("üíæ Salvar Configura√ß√µes de Alertas"):
            st.success("Configura√ß√µes de alertas salvas!")
    
    with tabs[1]:
        st.markdown("### üë• Gest√£o de Usu√°rios")
        
        users_data = pd.DataFrame({
            'Nome': ['Admin Sistema', 'Ana Silva', 'Jo√£o Santos', 'Maria Costa'],
            'Email': ['admin@capivari.sp.gov.br', 'ana.silva@capivari.sp.gov.br', 'joao.santos@capivari.sp.gov.br', 'maria.costa@capivari.sp.gov.br'],
            'Perfil': ['Administrador', 'Analista', 'Supervisor', 'Consultor'],
            'Status': ['üü¢ Ativo', 'üü¢ Ativo', 'üü¢ Ativo', 'üü° Pendente']
        })
        
        st.dataframe(users_data, use_container_width=True, hide_index=True)
        
        if st.button("‚ûï Adicionar Usu√°rio"):
            st.info("Funcionalidade de adi√ß√£o de usu√°rio")
    
    with tabs[2]:
        st.markdown("### üìß Configura√ß√µes de Notifica√ß√£o")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.checkbox("Email para alertas cr√≠ticos", value=True)
            st.checkbox("Email resumo di√°rio", value=True)
            st.checkbox("Telegram para emerg√™ncias", value=False)
        
        with col2:
            st.time_input("Hor√°rio do resumo di√°rio:", value=datetime.strptime("08:00", "%H:%M").time())
            st.text_input("Email principal:", value="admin@capivari.sp.gov.br")
            st.text_input("Telegram Bot Token:", value="", type="password")
        
        if st.button("üìß Salvar Notifica√ß√µes"):
            st.success("Configura√ß√µes de notifica√ß√£o salvas!")
    
    with tabs[3]:
        st.markdown("### üîê Configura√ß√µes de Seguran√ßa")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.number_input("Timeout sess√£o (minutos):", min_value=15, max_value=480, value=120)
            st.checkbox("Autentica√ß√£o dois fatores", value=False)
            st.checkbox("Log de auditoria", value=True)
        
        with col2:
            st.selectbox("N√≠vel de log:", ["INFO", "WARNING", "ERROR", "DEBUG"], index=0)
            st.number_input("Reten√ß√£o logs (dias):", min_value=7, max_value=365, value=90)
            st.checkbox("Backup autom√°tico", value=True)
        
        if st.button("üîê Salvar Seguran√ßa"):
            st.success("Configura√ß√µes de seguran√ßa salvas!")

if __name__ == "__main__":
    main()
